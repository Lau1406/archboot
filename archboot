#!/bin/bash
APPNAME="archboot"
VERSION="v2.9.2"
BRANCH="debug"
AUTHOR="grm34"
LICENSE="Apache License 2.0"

_archboot_banner() {
    echo -e """
${RED}
      _             _     _                 _
     / \   _ __  __| |__ | |__   ___   ___ | |_
    / _ \ | '__/ __| '_ \| '_ \ / _ \ / _ \| __|
   / ___ \| | | (__| | | | |_) | (_) | (_) | |_
  /_/   \_\_|  \___|_| |_|_.__/ \___/ \___/ \__|${GREEN}${VERSION}
${BLUE}
 Arch Linux Installer @ a script made with love by ${AUTHOR}
${NC}
Arch Linux is a light and fast distribution whose concept
is to remain  as simple  as possible. In the same purpose
this  script  performs  minimalist  installation, it only
installs the  required  packages  in order  to  give free
choice  to the  user.  Pretty  simple, it  just  asks for
language, hostname, username, which disk to use, required
partitions size  and  if  you wish  to install  a desktop
environment. According to the chosen one  and in order to
get complete support, additional packages may be required
For more  information, take a look  at the  ${APPNAME} wiki
"""
}

#                       ARCHBOOT_SYSTEM SETTINGS
# ============================================================================
# Here we define all required variables and functions to manage archboot.
# Variables are pretty simple such as define needed urls and colors.
# Functions are used to display install steps, notes, errors or to do
# some actions like to cleanup after fatal error, to execute cmd in
# chrooted environment, to select an option, to ask some information
# to the user or to get install logs.
# ============================================================================

# Github url for sources and images
URL="https://raw.githubusercontent.com/${AUTHOR}/${APPNAME}/${BRANCH}"
GHPAGES="https://raw.githubusercontent.com/${AUTHOR}/${APPNAME}/gh-pages"

# Shell colors
RED="\e[1;31m"; GREEN="\e[1;32m"; YELLOW="\e[1;33m"
BLUE="\e[1;34m"; CYAN="\e[1;36m"; NC="\e[0m"

# Display install steps
_info() {
    echo -e "${YELLOW}\n==> ${CYAN}${1}...${NC}"
    sleep 2s
}

# Display some notes
_note() {
    echo -e "${RED}\nNote: ${BLUE}${1}${NC}"
}

# Download show progress bar only
_wget() {
    wget ${1} -q --show-progress
}

# Execute action in chrooted environment
_chroot() {
    arch-chroot /mnt /bin/bash <<EOF
    ${1}
EOF
}

# Set logfile
_logs() {
    _info "Setting ${APPNAME} log"
    DATETIME=$(date '+%d-%m-%Y')
    LOG="${APPNAME}-${VERSION}_${DATETIME}.log"
}

# Set system clock
_clock() {
    _info "Setting system clock"
    timedatectl set-ntp true
    timedatectl set-timezone ${TIMEZONE}
    hwclock --systohc
}

# Check and return command status
_check() {
    "$@"
    local STATUS=$?
    if [[ ${STATUS} -ne 0 ]]; then
        _error "${@}"
    fi
    return ${STATUS}
}

# Delete sources, umount partitions and exit
_cleanup() {
    echo -e "\nCleaning up ${APPNAME}..."
    for SOURCE in *; do
        if [[ ${SOURCE} =~ ^(base|bootloader|desktop|display|\
firmware|mirrorlist|mounting|partition|user|vga|desktop_apps|\
display_apps|system_apps|vga_apps|00-keyboard|language|\
timezone|xprofile|background.png|Grub2-themes)$ ]]; then
            rm -rf ${SOURCE}
        fi
    done
    if mount | grep /mnt > /dev/null; then
        umount -R /mnt
    fi
    _note "you must reboot to prevent unreconized system changes."
    sleep 2
    exit 1
}

# Cleanup on keyboard interrupt
trap _cleanup 1 2 3 6

# Reboot with 10s timeout
_reboot() {
    for SECOND in $(seq 10 -1 1); do
        echo -ne "\r\033[K${GREEN}System will reboot in ${SECOND}s...${NC}"
        sleep 1
    done
    reboot
}

# Display error and cleanup
_error() {
    echo -e "${RED}Error: ${YELLOW}${*}${NC}\n"
    _cleanup
}

# Select an option
_select() {
    COUNT=0
    echo -ne "${YELLOW}\n==> "
    for ENTRY in "${@}"; do
        echo -ne "${RED}[$((++COUNT))] ${GREEN}${ENTRY} ${NC}"
    done
    LENTH=${*}
    NUMBER=$((${#*} * 4))
    COUNT=$((${#LENTH} + NUMBER + 1))
    echo -ne "${YELLOW}\n==> "
    _end
}

# Ask confirmation (Yes/No)
_confirm() {
    COUNT=$((${#1} + 6))
    until [[ ${CONFIRM} =~ ^(y|n|Y|N|yes|no|Yes|No|YES|NO)$ ]]; do
        echo -ne "${YELLOW}\n==> ${GREEN}${1} ${RED}[y/n]${YELLOW}\n==> "
        _end
        read -r CONFIRM
    done
}

# Ask some information
_prompt() {
    LENTH=${*}
    COUNT=${#LENTH}
    echo -ne "\n${YELLOW}==> ${GREEN}${1} ${RED}${2}"
    echo -ne "${YELLOW}\n==> "
    _end
}

# Display the end of select, confirm and prompt functions
_end() {
    for COUNT in $(seq ${COUNT}); do
        echo -ne "-"
    done
    echo -ne "\n==> ${NC}"
}

#                      ARCHBOOT_SYSTEM MANAGEMENT
# ============================================================================
# Here we check internet connection before downloading and importing sources.
# Sources are sorted by type: applications and scripts [src/apps & src/arch]
# Once done we can ask for user variables and store them to run install.
# In case of desktop environment, we import additional sources and we
# scan for 3D VGA controller to select appropriate drivers.
# Kernel mode setting support, in this case VGA Driver will not be installed.
# ============================================================================

# Display archboot banner
_archboot_banner

# Check Internet Connection
_info "Checking Internet connection"
INTERNET=$(ping -c 1 archlinux.org)
if [[ ${INTERNET} ]]; then
    _note "congratulations, you are connected to Internet!"
else
    _error "you are not connected to Internet!"
fi

# Download base sources
_confirm "Start downloading sources from github?"
case ${CONFIRM} in
    y|Y|yes|Yes|YES)
        _info "Downloading base sources"
        _wget ${URL}/src/arch/base            # to install Base system
        _wget ${URL}/src/arch/bootloader      # to install Grub2 bootloader
        _wget ${URL}/src/arch/firmware        # to get user firmware
        _wget ${URL}/src/arch/mirrorlist      # to get mirrorlist & timezone
        _wget ${URL}/src/arch/mounting        # to mount partitions & swap
        _wget ${URL}/src/arch/partition       # to create table & partitions
        _wget ${URL}/src/arch/user            # to get user variables
        _wget ${URL}/src/apps/system_apps     # to get system apps
        _wget ${URL}/conf/language            # to get language code
        _wget ${URL}/conf/timezone            # to get timezone
        ;;
    *)
        exit
        ;;
esac
unset CONFIRM

# Import base sources
_info "Importing base sources"
source ./base; source ./bootloader; source ./firmware; source ./mirrorlist
source ./mounting; source ./partition; source ./user; source ./system_apps

# Get required variables
_get_user_variables

# Desktop Environment
if [[ -n ${DESKTOP+x} ]]; then

    # Download desktop sources
    _info "Downloading desktop sources"
    _wget ${URL}/src/arch/vga             # to scan/install VGA Controller
    _wget ${URL}/src/arch/desktop         # to install Desktop Environment
    _wget ${URL}/src/arch/display         # to install Display Manager
    _wget ${URL}/src/apps/vga_apps        # to get VGA apps
    _wget ${URL}/src/apps/desktop_apps    # to get Desktop apps
    _wget ${URL}/src/apps/display_apps    # to get Display Manager apps

    # Import desktop sources
    _info "Importing desktop sources"
    source ./vga; source ./desktop; source ./display
    source ./vga_apps; source ./desktop_apps; source ./display_apps

    # VGA Driver or kernel mode setting?
    _note "enter NO to use kernel mode setting."
    _confirm "Do you wish to install VGA Driver?"
    case ${CONFIRM} in
        y|Y|yes|Yes|YES)
            _get_vga_driver
            ;;
    esac
    unset CONFIRM
fi

#                       ARCHBOOT_SYSTEM PREPARE
# ============================================================================
# Here we get user firmware to set partitions settings and other options.
# Then we get fastest mirrors, timezone, clock, logs and we properly define
# them. Now we could run partitioning, activate SWAP and mount the partitions.
# ============================================================================

# Prepare the system
_firmware; _mirrorlist; _timezone; _clock; _logs

# Partitioning
_note "enter NO to activate custom partitioning."
_confirm "Do you wish to install Arch Linux on a dedicated disk?"
case ${CONFIRM} in
    y|Y|yes|Yes|YES)
        _default_partitioning_scheme
        ;;
    *)
        _custom_partitioning_scheme
        ;;
esac
unset CONFIRM

# Mount
_mount_partitions
_note "system is ready to rumble! Partitions mounted & swap activated."

#                     ARCHBOOT_SYSTEM INSTALLATION
# ============================================================================
# At this point system is ready, partitions are created, properly mounted and
# user variables stored. We can start Arch Linux installation.
# First step is to install base system and second to install Grub bootloader.
# In case of desktop environment we install VGA Drivers and Display Manager.
# We use <tee> to get full installation logs of those steps.
# If system won't start desktop environment after reboot, check the logs and
# open an issue on GitHub. Logs are availables at /var/log/archboot.
# ============================================================================

_confirm "Do you wish to install Arch Linux now?"
case ${CONFIRM} in
    y|Y|yes|Yes|YES)

        # Install Arch Linux base system
        (_install_base; _install_bootloader) 2>&1 | tee -a ${LOG}

        # Install VGA Driver
        if [[ -n ${VGA_DRIVER+x} ]]; then
            (_install_vga_driver) 2>&1 | tee -a ${LOG}
        fi

        # Install desktop environment & display manager
        if [[ -n ${DESKTOP+x} ]]; then
            (_install_desktop_environment; _install_display_manager; \
_configure_desktop_environment) 2>&1 | tee -a ${LOG}
        fi

        # User rights
        if [[ -n ${POWER+x} ]]; then
            (_enable_user_rights) 2>&1 | tee -a ${LOG}
        fi

        # Logfile path
        _info "Setting logfile path"
        mkdir /mnt/var/log/${APPNAME}
        cp ${LOG} /mnt/var/log/${APPNAME}/

        # Success notes
        _note "Arch Linux installation successful!"
        ;;
    *)
        # Install aborted
        _error "installation aborted by user!"
        ;;
esac
unset CONFIRM

#                       ARCHBOOT_SYSTEM REBOOT
# ============================================================================
# And here we go! We could now cleanup sources, umount all partitions and
# reboot the computer to restart on our fresh Arch Linux installation.
# Telegram chat: t.me/archboot - Have fun, take care and give a star!
# ============================================================================

_note "${APPNAME} ${VERSION} by ${AUTHOR} under ${LICENSE}"
_confirm "Do you want to reboot your computer now?"
case ${CONFIRM} in
    y|Y|yes|Yes|YES)
        umount -R /mnt
        _reboot
        ;;
    *)
        _cleanup
        ;;
esac
unset CONFIRM

# archboot by grm34 under Apache License 2.0
# ============================================================================
